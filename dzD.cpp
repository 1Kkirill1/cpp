#include <iostream>
#include <string>

// "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º
// –º–µ—Ç–æ–¥–æ–º draw (Car)
// –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ,
// —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω:
// SportCar, Tractor,
// —Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—à–∏–Ω
// –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏—Ö"


#include <iostream>
#include <vector>
#include <memory>

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Car —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º draw
class Car {
public:
    // –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –º–∞—à–∏–Ω—ã
    virtual void draw() const {
        std::cout << "Drawing a generic car\n";
    }

    // –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    virtual ~Car() = default;
};

// –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–π –∫–ª–∞—Å—Å SportCar
class SportCar : public Car {
public:
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ draw –¥–ª—è SportCar
    void draw() const override {
        std::cout << "Drawing a sport car: üöó\n";
    }
};

// –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–π –∫–ª–∞—Å—Å Tractor
class Tractor : public Car {
public:
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ draw –¥–ª—è Tractor
    void draw() const override {
        std::cout << "Drawing a tractor: üöú\n";
    }
};



int dzD() {
    std::vector<Car*> cars;
    cars.push_back(new Tractor());
    cars.push_back(new SportCar());
    cars.push_back(new Car());

    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ draw –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    for (const auto car : cars) {
        car->draw(); // –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π –≤—ã–∑–æ–≤
    }

    return 0;
}